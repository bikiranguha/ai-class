# Breadth First search algorithm: Starts searching from shallowest node (i.e., from the top)


	function BFSSearch(initialState, goalTest):

		# frontier is now a queue, where the first element is the initialState. Its also FIFO
		frontier = Queue.new(initialState)

		# The explored set will contain all the nodes which have been explored
		explored = Set.new() 

		# loop till frontier is empty
		while not frontier.isEmpty():
			frontier.dequeue(state) # get rid of state from the queue
			explored.add(State)

			if goalTest(state):
				return success(state)
				# if goalTest is false, then load all neighbours of state and try again
				for neighbour in state.neighbors(): 
					if neighbour not in frontier or explored:
						frontier.enqueue(neighbors)   			# add neighbours to the queue

		return Failure # looped through all the items and none of them passed the goal test

		Note: If the search space is deep and has a lot of branches, this algorithm takes a lot of time and space.
