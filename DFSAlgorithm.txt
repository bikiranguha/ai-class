# Depth First search algorithm: Goes as deep as it can, then backtracks and then repeats


	function DFSSearch(initialState, goalTest):

		# frontier is now a stack, where the last element is first out (LIFO)
		frontier = Stack.new(initialState)

		# The explored set will contain all the nodes which have been explored
		explored = Set.new() 

		# loop till frontier is empty
		while not frontier.isEmpty():
			state = frontier.pop() # pick the state from the top of the stack
			explored.add(State)

			if goalTest(state):
				return success(state)
				# if goalTest is false, then load all neighbours of state and try again
				for neighbour in state.neighbors(): 
					if neighbour not in frontier or explored:
						frontier.push(neighbors)   			# add neighbours to the top of the stack

		return Failure # looped through all the items and none of them passed the goal test

		Note: If the search space is deep and has a lot of branches, this algorithm takes a lot of time and space.
