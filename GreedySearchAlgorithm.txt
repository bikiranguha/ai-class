# Greedy search algorithm, similar to UCS except for the fact that the cost function is replaced by a h(n) function. h(n) estimates the cost from n to the (closest) goal
# Greedy search expands the node closest to the goal. It uses some info about the cost from n to goal.
	function GreedySearch(initialState, goalTest):

		# frontier is now a heap, which can pick elements based on minimum cost
		frontier = Heap.new(initialState)

		# The explored set will contain all the nodes which have been explored
		explored = Set.new() 

		# loop till frontier is empty
		while not frontier.isEmpty():
			state = frontier.deleteMin() # From the heap, pick the element with min cost
			explored.add(State)

			if goalTest(state):
				return success(state)
				# if goalTest is false, then load all neighbours of state and try again
				for neighbour in state.neighbors(): 
					if neighbour not in frontier or explored:
						frontier.insert(state)   			# add neighbours to the heap
					else if neighbour in frontier:
						frontier.decreaseKey(neighbor)      # decrease the cost of the neighbour since its the shortest path

		return Failure # looped through all the items and none of them passed the goal test

		
